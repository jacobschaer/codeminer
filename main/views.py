from os import environ, makedirs
from os.path import join
from django.shortcuts import render
from main.models.repository import RepositoryForm
from main.models import Repository, Change
from main.models.repository import get_local_repository_connection
from codeminer_tools.repositories.entity import EntityType
from codeminer_tools.repositories.change import ChangeType
from django.http import HttpResponseRedirect, JsonResponse
from django.views.decorators.csrf import ensure_csrf_cookie

def index(request):
    context = {
        'repositories': [x for x in Repository.objects.all()]
    }
    return render(request, 'main/index.html', context)

def add_repository(request):
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = RepositoryForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            # ...
            # redirect to a new URL:

            # Attempt to connect:
            workspace = environ.get('CODEMINER_WORKSPACE_PATH')
            makedirs(workspace)
            connection = get_local_repository_connection(form.cleaned_data.get('repository_type'), form.cleaned_data.get('origin'),
                form.cleaned_data.get('username'), form.cleaned_data.get('password'), workspace, cleanup=False)
            form.local_copy = connection.working_copy
            form.save()
            return HttpResponseRedirect('/')
    else:
        form = RepositoryForm()
    return render(request, 'main/add_repository.html', {'form': form})

def delete_repository(request, repository_id):
    item = Repository.objects.get(pk=repository_id)
    item.delete()
    return HttpResponseRedirect('/')

@ensure_csrf_cookie
def repository_browser(request, repository_id):
    repository = Repository.objects.get(pk=repository_id)
    if request.method == 'POST':
        path = request.POST['path']
        result = []
        for entity, change in repository.get_leaf_nodes(path=path):
            revision = entity.revision
            label = entity.path.split('/')[-1] + '@' + revision
            if change.action == ChangeType.remove.value:
                li_attr = {'class' : 'dead_file'}
            else:
                li_attr = {}
                a_attr = {}
            if entity.type == EntityType.file.value:
                children = False
                icon = 'glyphicon glyphicon-file' 
                path = entity.path
                a_attr = {'href': '/files/{type}/{path}/{revision}'.format(type=repository.repository_type, path=path, revision=revision)}
            else:
                children = True
                icon = 'glyphicon glyphicon-folder-open'
                path = entity.path

            result.append({'text': label, 'children': children,
                           'icon': icon, 'li_attr': li_attr,
                           'a_attr': a_attr,
                           'data': {
                                'path': path,
                                'repository': repository_id,
                                'revision': revision}})
        return JsonResponse(result, safe=False)
    else:
        context = {'repository': repository}
        return render(request, 'main/repository.html', context)

def get_file(request, type, path, revision):
    db_repository = Repository.objects.get(pk=1)
    real_repository = SVNRepository()

#     {
#   id          : "string" // will be autogenerated if omitted
#   text        : "string" // node text
#   icon        : "string" // string for custom
#   state       : {
#     opened    : boolean  // is the node open
#     disabled  : boolean  // is the node disabled
#     selected  : boolean  // is the node selected
#   },
#   children    : []  // array of strings or objects
#   li_attr     : {}  // attributes for the generated LI node
#   a_attr      : {}  // attributes for the generated A node
# }
